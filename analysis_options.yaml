# Start with a good base, e.g., Flutter's recommended lints
include: package:flutter_lints/flutter.yaml
# Or, for a more general Dart set (less Flutter-specific):
# include: package:lints/recommended.yaml

analyzer:
  # Enforce strong mode for stricter type safety
  strong-mode:
    implicit-casts: false # Disallow implicit casts
    implicit-dynamic: false # Disallow implicit dynamic

  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  exclude:
    - "**.g.dart"
    - "**.freezed.dart"
    - "build/**"
    - "lib/generated_plugin_registrant.dart"
    # Add any other project-specific exclusions
    # - 'lib/legacy_code/**'

  errors:
    # Treat certain issues as errors, warnings, or ignore them
    # See https://dart.dev/tools/analysis#customizing-analysis-rules
    # Example: Make missing required parameters an error
    missing_required_param: error
    # Example: Treat TODOs as warnings
    todo: warning
    # Example: Ignore deprecated member use from the same package (useful during refactoring)
    deprecated_member_use_from_same_package: ignore

linter:
  rules:
    # === Core Dart & Flutter Best Practices ===
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - always_require_non_null_named_parameters
    - always_specify_types # Often debated; enable if your team prefers explicit types
    - annotate_overrides
    - avoid_empty_else
    - avoid_init_to_null
    - avoid_redundant_argument_values
    - avoid_relative_lib_imports
    - avoid_return_types_on_setters
    - avoid_returning_null_for_void
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    - avoid_types_as_parameter_names
    - avoid_unused_constructor_parameters
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - cancel_subscriptions
    - cast_nullable_to_non_nullable # With null safety, this helps catch potential issues
    - directives_ordering
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    - file_names # Enforce lowercase_with_underscores for file names
    - hash_and_equals
    - implementation_imports
    - iterable_contains_unrelated_type
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - lines_longer_than_80_chars # A common convention, adjust if needed (e.g., 100 or 120)
    - list_remove_unrelated_type
    - no_duplicate_case_values
    - no_logic_in_create_state # Flutter specific
    - non_constant_identifier_names
    - null_check_on_nullable_type_parameter
    # - omit_local_variable_types # Often preferred to reduce verbosity with type inference
    - package_api_docs # For public APIs in packages
    - package_names
    - package_prefixed_library_names
    - parameter_assignments
    - prefer_adjacent_string_concatenation
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables # Flutter specific
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables # Flutter specific
    - prefer_contains
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_for_elements_to_map_fromIterable # Dart 2.3+
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions # Dart 2.3+
    - prefer_if_null_operators
    - prefer_inlined_adds
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_null_aware_operators
    - prefer_spread_collections # Dart 2.3+
    - prefer_void_to_null
    # - public_member_api_docs # Enable if you want to enforce DartDoc on all public members
    - recursive_getters
    - require_trailing_commas
    - slash_for_doc_comments
    - sort_child_properties_last # Flutter specific
    - sort_constructors_first
    - sort_unnamed_constructors_first
    - type_annotate_public_apis # Superset of public_member_api_docs in some ways
    - type_init_formals
    - unawaited_futures # Important for catching unhandled async operations
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_checks
    - unnecessary_null_in_if_null_operators
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_statements
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - unrelated_type_equality_checks
    - use_build_context_synchronously # Flutter specific, very important
    - use_full_hex_values_for_flutter_colors # Flutter specific
    - use_key_in_widget_constructors # Flutter specific
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_string_buffers
    - use_super_parameters # Dart 2.17+
    - valid_regexps
    - void_checks

    # Example of disabling a rule that was included from flutter_lints if you don't agree
    # avoid_print: false

    # Example of enabling a specific Flutter rule not in the base set or with different preference
    # prefer_single_quotes: true # If your team prefers single quotes
